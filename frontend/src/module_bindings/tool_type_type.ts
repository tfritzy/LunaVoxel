// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
  type TableHandle as __TableHandle,
} from "spacetimedb";
import * as ToolTypeVariants from './tool_type_variants'

// The tagged union or sum type for the algebraic type `ToolType`.
export type ToolType = ToolTypeVariants.Build |
  ToolTypeVariants.Erase |
  ToolTypeVariants.Paint |
  ToolTypeVariants.BlockPicker |
  ToolTypeVariants.MagicSelect;

let _cached_ToolType_type_value: __AlgebraicTypeType | null = null;

// A value with helper functions to construct the type.
export const ToolType = {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  Build: { tag: "Build" } as const,
  Erase: { tag: "Erase" } as const,
  Paint: { tag: "Paint" } as const,
  BlockPicker: { tag: "BlockPicker" } as const,
  MagicSelect: { tag: "MagicSelect" } as const,

  getTypeScriptAlgebraicType(): __AlgebraicTypeType {
    if (_cached_ToolType_type_value) return _cached_ToolType_type_value;
    _cached_ToolType_type_value = __AlgebraicTypeValue.Sum({ variants: [] });
    _cached_ToolType_type_value.value.variants.push(
      { name: "Build", algebraicType: __AlgebraicTypeValue.Product({ elements: [] }) },
      { name: "Erase", algebraicType: __AlgebraicTypeValue.Product({ elements: [] }) },
      { name: "Paint", algebraicType: __AlgebraicTypeValue.Product({ elements: [] }) },
      { name: "BlockPicker", algebraicType: __AlgebraicTypeValue.Product({ elements: [] }) },
      { name: "MagicSelect", algebraicType: __AlgebraicTypeValue.Product({ elements: [] }) },
    );
    return _cached_ToolType_type_value;
  },

  serialize(writer: __BinaryWriter, value: ToolType): void {
      __AlgebraicTypeValue.serializeValue(writer, ToolType.getTypeScriptAlgebraicType(), value);
  },

  deserialize(reader: __BinaryReader): ToolType {
      return __AlgebraicTypeValue.deserializeValue(reader, ToolType.getTypeScriptAlgebraicType());
  },

}

export default ToolType;


