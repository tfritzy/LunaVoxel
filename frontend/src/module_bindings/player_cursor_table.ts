// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
  type TableHandle as __TableHandle,
} from "spacetimedb";
import { PlayerCursor } from "./player_cursor_type";
import { Vector3Float } from "./vector_3_float_type";
// Mark import as potentially unused
declare type __keep_Vector3Float = Vector3Float;
import { ToolType } from "./tool_type_type";
// Mark import as potentially unused
declare type __keep_ToolType = ToolType;

import { type EventContext, type Reducer, RemoteReducers, RemoteTables } from ".";
declare type __keep = [EventContext, Reducer, RemoteReducers, RemoteTables];

/**
 * Table handle for the table `player_cursor`.
 *
 * Obtain a handle from the [`playerCursor`] property on [`RemoteTables`],
 * like `ctx.db.playerCursor`.
 *
 * Users are encouraged not to explicitly reference this type,
 * but to directly chain method calls,
 * like `ctx.db.playerCursor.on_insert(...)`.
 */
export class PlayerCursorTableHandle<TableName extends string> implements __TableHandle<TableName> {
  // phantom type to track the table name
  readonly tableName!: TableName;
  tableCache: __TableCache<PlayerCursor>;

  constructor(tableCache: __TableCache<PlayerCursor>) {
    this.tableCache = tableCache;
  }

  count(): number {
    return this.tableCache.count();
  }

  iter(): Iterable<PlayerCursor> {
    return this.tableCache.iter();
  }
  /**
   * Access to the `id` unique index on the table `player_cursor`,
   * which allows point queries on the field of the same name
   * via the [`PlayerCursorIdUnique.find`] method.
   *
   * Users are encouraged not to explicitly reference this type,
   * but to directly chain method calls,
   * like `ctx.db.playerCursor.id().find(...)`.
   *
   * Get a handle on the `id` unique index on the table `player_cursor`.
   */
  id = {
    // Find the subscribed row whose `id` column value is equal to `col_val`,
    // if such a row is present in the client cache.
    find: (col_val: string): PlayerCursor | undefined => {
      for (let row of this.tableCache.iter()) {
        if (__deepEqual(row.id, col_val)) {
          return row;
        }
      }
    },
  };

  onInsert = (cb: (ctx: EventContext, row: PlayerCursor) => void) => {
    return this.tableCache.onInsert(cb);
  }

  removeOnInsert = (cb: (ctx: EventContext, row: PlayerCursor) => void) => {
    return this.tableCache.removeOnInsert(cb);
  }

  onDelete = (cb: (ctx: EventContext, row: PlayerCursor) => void) => {
    return this.tableCache.onDelete(cb);
  }

  removeOnDelete = (cb: (ctx: EventContext, row: PlayerCursor) => void) => {
    return this.tableCache.removeOnDelete(cb);
  }

  // Updates are only defined for tables with primary keys.
  onUpdate = (cb: (ctx: EventContext, oldRow: PlayerCursor, newRow: PlayerCursor) => void) => {
    return this.tableCache.onUpdate(cb);
  }

  removeOnUpdate = (cb: (ctx: EventContext, onRow: PlayerCursor, newRow: PlayerCursor) => void) => {
    return this.tableCache.removeOnUpdate(cb);
  }}
