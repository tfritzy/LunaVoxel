// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { CreateWorld } from "./create_world_reducer.ts";
export { CreateWorld };
import { PlaceBlock } from "./place_block_reducer.ts";
export { PlaceBlock };

// Import and reexport all table handle types
import { ChunkTableHandle } from "./chunk_table.ts";
export { ChunkTableHandle };
import { WorldTableHandle } from "./world_table.ts";
export { WorldTableHandle };

// Import and reexport all types
import { BlockType } from "./block_type_type.ts";
export { BlockType };
import { Chunk } from "./chunk_type.ts";
export { Chunk };
import { World } from "./world_type.ts";
export { World };

const REMOTE_MODULE = {
  tables: {
    Chunk: {
      tableName: "Chunk",
      rowType: Chunk.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    World: {
      tableName: "World",
      rowType: World.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    CreateWorld: {
      reducerName: "CreateWorld",
      argsType: CreateWorld.getTypeScriptAlgebraicType(),
    },
    PlaceBlock: {
      reducerName: "PlaceBlock",
      argsType: PlaceBlock.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CreateWorld", args: CreateWorld }
| { name: "PlaceBlock", args: PlaceBlock }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  createWorld(name: string, xDim: number, yDim: number, zDim: number) {
    const __args = { name, xDim, yDim, zDim };
    let __writer = new BinaryWriter(1024);
    CreateWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateWorld", __argsBuffer, this.setCallReducerFlags.createWorldFlags);
  }

  onCreateWorld(callback: (ctx: ReducerEventContext, name: string, xDim: number, yDim: number, zDim: number) => void) {
    this.connection.onReducer("CreateWorld", callback);
  }

  removeOnCreateWorld(callback: (ctx: ReducerEventContext, name: string, xDim: number, yDim: number, zDim: number) => void) {
    this.connection.offReducer("CreateWorld", callback);
  }

  placeBlock(world: string, type: BlockType, x: number, y: number, z: number) {
    const __args = { world, type, x, y, z };
    let __writer = new BinaryWriter(1024);
    PlaceBlock.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("PlaceBlock", __argsBuffer, this.setCallReducerFlags.placeBlockFlags);
  }

  onPlaceBlock(callback: (ctx: ReducerEventContext, world: string, type: BlockType, x: number, y: number, z: number) => void) {
    this.connection.onReducer("PlaceBlock", callback);
  }

  removeOnPlaceBlock(callback: (ctx: ReducerEventContext, world: string, type: BlockType, x: number, y: number, z: number) => void) {
    this.connection.offReducer("PlaceBlock", callback);
  }

}

export class SetReducerFlags {
  createWorldFlags: CallReducerFlags = 'FullUpdate';
  createWorld(flags: CallReducerFlags) {
    this.createWorldFlags = flags;
  }

  placeBlockFlags: CallReducerFlags = 'FullUpdate';
  placeBlock(flags: CallReducerFlags) {
    this.placeBlockFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get chunk(): ChunkTableHandle {
    return new ChunkTableHandle(this.connection.clientCache.getOrCreateTable<Chunk>(REMOTE_MODULE.tables.Chunk));
  }

  get world(): WorldTableHandle {
    return new WorldTableHandle(this.connection.clientCache.getOrCreateTable<World>(REMOTE_MODULE.tables.World));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
