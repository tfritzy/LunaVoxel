// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.6.0 (commit ).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
  type TableHandle as __TableHandle,
} from "spacetimedb";

// Import and reexport all reducer arg types

// Import and reexport all table handle types
import { LayerTableHandle } from "./layer_table.ts";
export { LayerTableHandle };
import { PlayerCursorTableHandle } from "./player_cursor_table.ts";
export { PlayerCursorTableHandle };
import { ProjectBlocksTableHandle } from "./project_blocks_table.ts";
export { ProjectBlocksTableHandle };
import { ProjectsTableHandle } from "./projects_table.ts";
export { ProjectsTableHandle };
import { SelectionsTableHandle } from "./selections_table.ts";
export { SelectionsTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };
import { UserProjectsTableHandle } from "./user_projects_table.ts";
export { UserProjectsTableHandle };

// Import and reexport all types
import { AccessType } from "./access_type_type.ts";
export { AccessType };
import { Layer } from "./layer_type.ts";
export { Layer };
import { PlayerCursor } from "./player_cursor_type.ts";
export { PlayerCursor };
import { Project } from "./project_type.ts";
export { Project };
import { ProjectBlocks } from "./project_blocks_type.ts";
export { ProjectBlocks };
import { Selection } from "./selection_type.ts";
export { Selection };
import { User } from "./user_type.ts";
export { User };
import { UserProject } from "./user_project_type.ts";
export { UserProject };
import { Vector3 } from "./vector_3_type.ts";
export { Vector3 };
import { Vector3Float } from "./vector_3_float_type.ts";
export { Vector3Float };

const REMOTE_MODULE = {
  tables: {
    layer: {
      tableName: "layer" as const,
      rowType: Layer.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Layer.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    player_cursor: {
      tableName: "player_cursor" as const,
      rowType: PlayerCursor.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (PlayerCursor.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    project_blocks: {
      tableName: "project_blocks" as const,
      rowType: ProjectBlocks.getTypeScriptAlgebraicType(),
      primaryKey: "projectId",
      primaryKeyInfo: {
        colName: "projectId",
        colType: (ProjectBlocks.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    projects: {
      tableName: "projects" as const,
      rowType: Project.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Project.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    selections: {
      tableName: "selections" as const,
      rowType: Selection.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Selection.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    user: {
      tableName: "user" as const,
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: (User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    user_projects: {
      tableName: "user_projects" as const,
      rowType: UserProject.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (UserProject.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
  },
  versionInfo: {
    cliVersion: "1.6.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

}

export class SetReducerFlags {
}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get layer(): LayerTableHandle<'layer'> {
    // clientCache is a private property
    return new LayerTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Layer>(REMOTE_MODULE.tables.layer));
  }

  get playerCursor(): PlayerCursorTableHandle<'player_cursor'> {
    // clientCache is a private property
    return new PlayerCursorTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<PlayerCursor>(REMOTE_MODULE.tables.player_cursor));
  }

  get projectBlocks(): ProjectBlocksTableHandle<'project_blocks'> {
    // clientCache is a private property
    return new ProjectBlocksTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<ProjectBlocks>(REMOTE_MODULE.tables.project_blocks));
  }

  get projects(): ProjectsTableHandle<'projects'> {
    // clientCache is a private property
    return new ProjectsTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Project>(REMOTE_MODULE.tables.projects));
  }

  get selections(): SelectionsTableHandle<'selections'> {
    // clientCache is a private property
    return new SelectionsTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Selection>(REMOTE_MODULE.tables.selections));
  }

  get user(): UserTableHandle<'user'> {
    // clientCache is a private property
    return new UserTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }

  get userProjects(): UserProjectsTableHandle<'user_projects'> {
    // clientCache is a private property
    return new UserProjectsTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<UserProject>(REMOTE_MODULE.tables.user_projects));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
