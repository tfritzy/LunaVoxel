// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.4.0 (commit ).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { AddBlock } from "./add_block_reducer.ts";
export { AddBlock };
import { AddLayer } from "./add_layer_reducer.ts";
export { AddLayer };
import { ChangePublicAccessToProject } from "./change_public_access_to_project_reducer.ts";
export { ChangePublicAccessToProject };
import { ChangeUserAccessToProject } from "./change_user_access_to_project_reducer.ts";
export { ChangeUserAccessToProject };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CreateProject } from "./create_project_reducer.ts";
export { CreateProject };
import { DeleteBlock } from "./delete_block_reducer.ts";
export { DeleteBlock };
import { DeleteLayer } from "./delete_layer_reducer.ts";
export { DeleteLayer };
import { InitializeBlocks } from "./initialize_blocks_reducer.ts";
export { InitializeBlocks };
import { InviteToProject } from "./invite_to_project_reducer.ts";
export { InviteToProject };
import { MagicSelect } from "./magic_select_reducer.ts";
export { MagicSelect };
import { ModifyBlockAmorphous } from "./modify_block_amorphous_reducer.ts";
export { ModifyBlockAmorphous };
import { PokeProject } from "./poke_project_reducer.ts";
export { PokeProject };
import { ReorderLayers } from "./reorder_layers_reducer.ts";
export { ReorderLayers };
import { SyncUser } from "./sync_user_reducer.ts";
export { SyncUser };
import { ToggleLayerLock } from "./toggle_layer_lock_reducer.ts";
export { ToggleLayerLock };
import { ToggleLayerVisibility } from "./toggle_layer_visibility_reducer.ts";
export { ToggleLayerVisibility };
import { UndoEdit } from "./undo_edit_reducer.ts";
export { UndoEdit };
import { UpdateBlock } from "./update_block_reducer.ts";
export { UpdateBlock };
import { UpdateCursorPos } from "./update_cursor_pos_reducer.ts";
export { UpdateCursorPos };
import { UpdateProjectName } from "./update_project_name_reducer.ts";
export { UpdateProjectName };

// Import and reexport all table handle types
import { ChunkTableHandle } from "./chunk_table.ts";
export { ChunkTableHandle };
import { LayerTableHandle } from "./layer_table.ts";
export { LayerTableHandle };
import { PlayerCursorTableHandle } from "./player_cursor_table.ts";
export { PlayerCursorTableHandle };
import { ProjectBlocksTableHandle } from "./project_blocks_table.ts";
export { ProjectBlocksTableHandle };
import { ProjectsTableHandle } from "./projects_table.ts";
export { ProjectsTableHandle };
import { SelectionsTableHandle } from "./selections_table.ts";
export { SelectionsTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };
import { UserProjectsTableHandle } from "./user_projects_table.ts";
export { UserProjectsTableHandle };

// Import and reexport all types
import { AccessType } from "./access_type_type.ts";
export { AccessType };
import { Chunk } from "./chunk_type.ts";
export { Chunk };
import { Layer } from "./layer_type.ts";
export { Layer };
import { PlayerCursor } from "./player_cursor_type.ts";
export { PlayerCursor };
import { Project } from "./project_type.ts";
export { Project };
import { ProjectBlocks } from "./project_blocks_type.ts";
export { ProjectBlocks };
import { Selection } from "./selection_type.ts";
export { Selection };
import { User } from "./user_type.ts";
export { User };
import { UserProject } from "./user_project_type.ts";
export { UserProject };
import { Vector3 } from "./vector_3_type.ts";
export { Vector3 };
import { Vector3Float } from "./vector_3_float_type.ts";
export { Vector3Float };

const REMOTE_MODULE = {
  tables: {
    chunk: {
      tableName: "chunk",
      rowType: Chunk.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Chunk.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    layer: {
      tableName: "layer",
      rowType: Layer.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Layer.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    player_cursor: {
      tableName: "player_cursor",
      rowType: PlayerCursor.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (PlayerCursor.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    project_blocks: {
      tableName: "project_blocks",
      rowType: ProjectBlocks.getTypeScriptAlgebraicType(),
      primaryKey: "projectId",
      primaryKeyInfo: {
        colName: "projectId",
        colType: (ProjectBlocks.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    projects: {
      tableName: "projects",
      rowType: Project.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Project.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    selections: {
      tableName: "selections",
      rowType: Selection.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Selection.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: (User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    user_projects: {
      tableName: "user_projects",
      rowType: UserProject.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (UserProject.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    AddBlock: {
      reducerName: "AddBlock",
      argsType: AddBlock.getTypeScriptAlgebraicType(),
    },
    AddLayer: {
      reducerName: "AddLayer",
      argsType: AddLayer.getTypeScriptAlgebraicType(),
    },
    ChangePublicAccessToProject: {
      reducerName: "ChangePublicAccessToProject",
      argsType: ChangePublicAccessToProject.getTypeScriptAlgebraicType(),
    },
    ChangeUserAccessToProject: {
      reducerName: "ChangeUserAccessToProject",
      argsType: ChangeUserAccessToProject.getTypeScriptAlgebraicType(),
    },
    ClientConnected: {
      reducerName: "ClientConnected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    ClientDisconnected: {
      reducerName: "ClientDisconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    CreateProject: {
      reducerName: "CreateProject",
      argsType: CreateProject.getTypeScriptAlgebraicType(),
    },
    DeleteBlock: {
      reducerName: "DeleteBlock",
      argsType: DeleteBlock.getTypeScriptAlgebraicType(),
    },
    DeleteLayer: {
      reducerName: "DeleteLayer",
      argsType: DeleteLayer.getTypeScriptAlgebraicType(),
    },
    InitializeBlocks: {
      reducerName: "InitializeBlocks",
      argsType: InitializeBlocks.getTypeScriptAlgebraicType(),
    },
    InviteToProject: {
      reducerName: "InviteToProject",
      argsType: InviteToProject.getTypeScriptAlgebraicType(),
    },
    MagicSelect: {
      reducerName: "MagicSelect",
      argsType: MagicSelect.getTypeScriptAlgebraicType(),
    },
    ModifyBlockAmorphous: {
      reducerName: "ModifyBlockAmorphous",
      argsType: ModifyBlockAmorphous.getTypeScriptAlgebraicType(),
    },
    PokeProject: {
      reducerName: "PokeProject",
      argsType: PokeProject.getTypeScriptAlgebraicType(),
    },
    ReorderLayers: {
      reducerName: "ReorderLayers",
      argsType: ReorderLayers.getTypeScriptAlgebraicType(),
    },
    SyncUser: {
      reducerName: "SyncUser",
      argsType: SyncUser.getTypeScriptAlgebraicType(),
    },
    ToggleLayerLock: {
      reducerName: "ToggleLayerLock",
      argsType: ToggleLayerLock.getTypeScriptAlgebraicType(),
    },
    ToggleLayerVisibility: {
      reducerName: "ToggleLayerVisibility",
      argsType: ToggleLayerVisibility.getTypeScriptAlgebraicType(),
    },
    UndoEdit: {
      reducerName: "UndoEdit",
      argsType: UndoEdit.getTypeScriptAlgebraicType(),
    },
    UpdateBlock: {
      reducerName: "UpdateBlock",
      argsType: UpdateBlock.getTypeScriptAlgebraicType(),
    },
    UpdateCursorPos: {
      reducerName: "UpdateCursorPos",
      argsType: UpdateCursorPos.getTypeScriptAlgebraicType(),
    },
    UpdateProjectName: {
      reducerName: "UpdateProjectName",
      argsType: UpdateProjectName.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.4.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddBlock", args: AddBlock }
| { name: "AddLayer", args: AddLayer }
| { name: "ChangePublicAccessToProject", args: ChangePublicAccessToProject }
| { name: "ChangeUserAccessToProject", args: ChangeUserAccessToProject }
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CreateProject", args: CreateProject }
| { name: "DeleteBlock", args: DeleteBlock }
| { name: "DeleteLayer", args: DeleteLayer }
| { name: "InitializeBlocks", args: InitializeBlocks }
| { name: "InviteToProject", args: InviteToProject }
| { name: "MagicSelect", args: MagicSelect }
| { name: "ModifyBlockAmorphous", args: ModifyBlockAmorphous }
| { name: "PokeProject", args: PokeProject }
| { name: "ReorderLayers", args: ReorderLayers }
| { name: "SyncUser", args: SyncUser }
| { name: "ToggleLayerLock", args: ToggleLayerLock }
| { name: "ToggleLayerVisibility", args: ToggleLayerVisibility }
| { name: "UndoEdit", args: UndoEdit }
| { name: "UpdateBlock", args: UpdateBlock }
| { name: "UpdateCursorPos", args: UpdateCursorPos }
| { name: "UpdateProjectName", args: UpdateProjectName }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addBlock(projectId: string, atlasFaceIndexes: number[]) {
    const __args = { projectId, atlasFaceIndexes };
    let __writer = new __BinaryWriter(1024);
    AddBlock.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddBlock", __argsBuffer, this.setCallReducerFlags.addBlockFlags);
  }

  onAddBlock(callback: (ctx: ReducerEventContext, projectId: string, atlasFaceIndexes: number[]) => void) {
    this.connection.onReducer("AddBlock", callback);
  }

  removeOnAddBlock(callback: (ctx: ReducerEventContext, projectId: string, atlasFaceIndexes: number[]) => void) {
    this.connection.offReducer("AddBlock", callback);
  }

  addLayer(projectId: string) {
    const __args = { projectId };
    let __writer = new __BinaryWriter(1024);
    AddLayer.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddLayer", __argsBuffer, this.setCallReducerFlags.addLayerFlags);
  }

  onAddLayer(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.onReducer("AddLayer", callback);
  }

  removeOnAddLayer(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.offReducer("AddLayer", callback);
  }

  changePublicAccessToProject(projectId: string, accessType: AccessType) {
    const __args = { projectId, accessType };
    let __writer = new __BinaryWriter(1024);
    ChangePublicAccessToProject.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ChangePublicAccessToProject", __argsBuffer, this.setCallReducerFlags.changePublicAccessToProjectFlags);
  }

  onChangePublicAccessToProject(callback: (ctx: ReducerEventContext, projectId: string, accessType: AccessType) => void) {
    this.connection.onReducer("ChangePublicAccessToProject", callback);
  }

  removeOnChangePublicAccessToProject(callback: (ctx: ReducerEventContext, projectId: string, accessType: AccessType) => void) {
    this.connection.offReducer("ChangePublicAccessToProject", callback);
  }

  changeUserAccessToProject(projectId: string, email: string, accessType: AccessType) {
    const __args = { projectId, email, accessType };
    let __writer = new __BinaryWriter(1024);
    ChangeUserAccessToProject.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ChangeUserAccessToProject", __argsBuffer, this.setCallReducerFlags.changeUserAccessToProjectFlags);
  }

  onChangeUserAccessToProject(callback: (ctx: ReducerEventContext, projectId: string, email: string, accessType: AccessType) => void) {
    this.connection.onReducer("ChangeUserAccessToProject", callback);
  }

  removeOnChangeUserAccessToProject(callback: (ctx: ReducerEventContext, projectId: string, email: string, accessType: AccessType) => void) {
    this.connection.offReducer("ChangeUserAccessToProject", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientConnected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientConnected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientDisconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientDisconnected", callback);
  }

  createProject(id: string, name: string, xDim: number, yDim: number, zDim: number) {
    const __args = { id, name, xDim, yDim, zDim };
    let __writer = new __BinaryWriter(1024);
    CreateProject.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateProject", __argsBuffer, this.setCallReducerFlags.createProjectFlags);
  }

  onCreateProject(callback: (ctx: ReducerEventContext, id: string, name: string, xDim: number, yDim: number, zDim: number) => void) {
    this.connection.onReducer("CreateProject", callback);
  }

  removeOnCreateProject(callback: (ctx: ReducerEventContext, id: string, name: string, xDim: number, yDim: number, zDim: number) => void) {
    this.connection.offReducer("CreateProject", callback);
  }

  deleteBlock(projectId: string, blockIndex: number, replacementBlockType: number) {
    const __args = { projectId, blockIndex, replacementBlockType };
    let __writer = new __BinaryWriter(1024);
    DeleteBlock.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteBlock", __argsBuffer, this.setCallReducerFlags.deleteBlockFlags);
  }

  onDeleteBlock(callback: (ctx: ReducerEventContext, projectId: string, blockIndex: number, replacementBlockType: number) => void) {
    this.connection.onReducer("DeleteBlock", callback);
  }

  removeOnDeleteBlock(callback: (ctx: ReducerEventContext, projectId: string, blockIndex: number, replacementBlockType: number) => void) {
    this.connection.offReducer("DeleteBlock", callback);
  }

  deleteLayer(id: string) {
    const __args = { id };
    let __writer = new __BinaryWriter(1024);
    DeleteLayer.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("DeleteLayer", __argsBuffer, this.setCallReducerFlags.deleteLayerFlags);
  }

  onDeleteLayer(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.onReducer("DeleteLayer", callback);
  }

  removeOnDeleteLayer(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.offReducer("DeleteLayer", callback);
  }

  initializeBlocks(projectId: string) {
    const __args = { projectId };
    let __writer = new __BinaryWriter(1024);
    InitializeBlocks.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InitializeBlocks", __argsBuffer, this.setCallReducerFlags.initializeBlocksFlags);
  }

  onInitializeBlocks(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.onReducer("InitializeBlocks", callback);
  }

  removeOnInitializeBlocks(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.offReducer("InitializeBlocks", callback);
  }

  inviteToProject(projectId: string, email: string, accessType: AccessType) {
    const __args = { projectId, email, accessType };
    let __writer = new __BinaryWriter(1024);
    InviteToProject.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InviteToProject", __argsBuffer, this.setCallReducerFlags.inviteToProjectFlags);
  }

  onInviteToProject(callback: (ctx: ReducerEventContext, projectId: string, email: string, accessType: AccessType) => void) {
    this.connection.onReducer("InviteToProject", callback);
  }

  removeOnInviteToProject(callback: (ctx: ReducerEventContext, projectId: string, email: string, accessType: AccessType) => void) {
    this.connection.offReducer("InviteToProject", callback);
  }

  magicSelect(projectId: string, layerIndex: number, position: Vector3) {
    const __args = { projectId, layerIndex, position };
    let __writer = new __BinaryWriter(1024);
    MagicSelect.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("MagicSelect", __argsBuffer, this.setCallReducerFlags.magicSelectFlags);
  }

  onMagicSelect(callback: (ctx: ReducerEventContext, projectId: string, layerIndex: number, position: Vector3) => void) {
    this.connection.onReducer("MagicSelect", callback);
  }

  removeOnMagicSelect(callback: (ctx: ReducerEventContext, projectId: string, layerIndex: number, position: Vector3) => void) {
    this.connection.offReducer("MagicSelect", callback);
  }

  modifyBlockAmorphous(projectId: string, diffMin: Vector3, diffMax: Vector3, compressedDiffData: Uint8Array, layerIndex: number) {
    const __args = { projectId, diffMin, diffMax, compressedDiffData, layerIndex };
    let __writer = new __BinaryWriter(1024);
    ModifyBlockAmorphous.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ModifyBlockAmorphous", __argsBuffer, this.setCallReducerFlags.modifyBlockAmorphousFlags);
  }

  onModifyBlockAmorphous(callback: (ctx: ReducerEventContext, projectId: string, diffMin: Vector3, diffMax: Vector3, compressedDiffData: Uint8Array, layerIndex: number) => void) {
    this.connection.onReducer("ModifyBlockAmorphous", callback);
  }

  removeOnModifyBlockAmorphous(callback: (ctx: ReducerEventContext, projectId: string, diffMin: Vector3, diffMax: Vector3, compressedDiffData: Uint8Array, layerIndex: number) => void) {
    this.connection.offReducer("ModifyBlockAmorphous", callback);
  }

  pokeProject(projectId: string) {
    const __args = { projectId };
    let __writer = new __BinaryWriter(1024);
    PokeProject.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("PokeProject", __argsBuffer, this.setCallReducerFlags.pokeProjectFlags);
  }

  onPokeProject(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.onReducer("PokeProject", callback);
  }

  removeOnPokeProject(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.offReducer("PokeProject", callback);
  }

  reorderLayers(projectId: string, newOrder: string[]) {
    const __args = { projectId, newOrder };
    let __writer = new __BinaryWriter(1024);
    ReorderLayers.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ReorderLayers", __argsBuffer, this.setCallReducerFlags.reorderLayersFlags);
  }

  onReorderLayers(callback: (ctx: ReducerEventContext, projectId: string, newOrder: string[]) => void) {
    this.connection.onReducer("ReorderLayers", callback);
  }

  removeOnReorderLayers(callback: (ctx: ReducerEventContext, projectId: string, newOrder: string[]) => void) {
    this.connection.offReducer("ReorderLayers", callback);
  }

  syncUser(identityHex: string, email: string, name: string) {
    const __args = { identityHex, email, name };
    let __writer = new __BinaryWriter(1024);
    SyncUser.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SyncUser", __argsBuffer, this.setCallReducerFlags.syncUserFlags);
  }

  onSyncUser(callback: (ctx: ReducerEventContext, identityHex: string, email: string, name: string) => void) {
    this.connection.onReducer("SyncUser", callback);
  }

  removeOnSyncUser(callback: (ctx: ReducerEventContext, identityHex: string, email: string, name: string) => void) {
    this.connection.offReducer("SyncUser", callback);
  }

  toggleLayerLock(layerId: string) {
    const __args = { layerId };
    let __writer = new __BinaryWriter(1024);
    ToggleLayerLock.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ToggleLayerLock", __argsBuffer, this.setCallReducerFlags.toggleLayerLockFlags);
  }

  onToggleLayerLock(callback: (ctx: ReducerEventContext, layerId: string) => void) {
    this.connection.onReducer("ToggleLayerLock", callback);
  }

  removeOnToggleLayerLock(callback: (ctx: ReducerEventContext, layerId: string) => void) {
    this.connection.offReducer("ToggleLayerLock", callback);
  }

  toggleLayerVisibility(layerId: string) {
    const __args = { layerId };
    let __writer = new __BinaryWriter(1024);
    ToggleLayerVisibility.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ToggleLayerVisibility", __argsBuffer, this.setCallReducerFlags.toggleLayerVisibilityFlags);
  }

  onToggleLayerVisibility(callback: (ctx: ReducerEventContext, layerId: string) => void) {
    this.connection.onReducer("ToggleLayerVisibility", callback);
  }

  removeOnToggleLayerVisibility(callback: (ctx: ReducerEventContext, layerId: string) => void) {
    this.connection.offReducer("ToggleLayerVisibility", callback);
  }

  undoEdit(projectId: string, beforeDiff: Uint8Array, afterDiff: Uint8Array, layerIndex: number) {
    const __args = { projectId, beforeDiff, afterDiff, layerIndex };
    let __writer = new __BinaryWriter(1024);
    UndoEdit.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UndoEdit", __argsBuffer, this.setCallReducerFlags.undoEditFlags);
  }

  onUndoEdit(callback: (ctx: ReducerEventContext, projectId: string, beforeDiff: Uint8Array, afterDiff: Uint8Array, layerIndex: number) => void) {
    this.connection.onReducer("UndoEdit", callback);
  }

  removeOnUndoEdit(callback: (ctx: ReducerEventContext, projectId: string, beforeDiff: Uint8Array, afterDiff: Uint8Array, layerIndex: number) => void) {
    this.connection.offReducer("UndoEdit", callback);
  }

  updateBlock(projectId: string, index: number, faceColors: number[]) {
    const __args = { projectId, index, faceColors };
    let __writer = new __BinaryWriter(1024);
    UpdateBlock.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateBlock", __argsBuffer, this.setCallReducerFlags.updateBlockFlags);
  }

  onUpdateBlock(callback: (ctx: ReducerEventContext, projectId: string, index: number, faceColors: number[]) => void) {
    this.connection.onReducer("UpdateBlock", callback);
  }

  removeOnUpdateBlock(callback: (ctx: ReducerEventContext, projectId: string, index: number, faceColors: number[]) => void) {
    this.connection.offReducer("UpdateBlock", callback);
  }

  updateCursorPos(projectId: string, identity: __Identity, pos: Vector3Float | undefined, normal: Vector3Float | undefined) {
    const __args = { projectId, identity, pos, normal };
    let __writer = new __BinaryWriter(1024);
    UpdateCursorPos.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateCursorPos", __argsBuffer, this.setCallReducerFlags.updateCursorPosFlags);
  }

  onUpdateCursorPos(callback: (ctx: ReducerEventContext, projectId: string, identity: __Identity, pos: Vector3Float | undefined, normal: Vector3Float | undefined) => void) {
    this.connection.onReducer("UpdateCursorPos", callback);
  }

  removeOnUpdateCursorPos(callback: (ctx: ReducerEventContext, projectId: string, identity: __Identity, pos: Vector3Float | undefined, normal: Vector3Float | undefined) => void) {
    this.connection.offReducer("UpdateCursorPos", callback);
  }

  updateProjectName(projectId: string, name: string) {
    const __args = { projectId, name };
    let __writer = new __BinaryWriter(1024);
    UpdateProjectName.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateProjectName", __argsBuffer, this.setCallReducerFlags.updateProjectNameFlags);
  }

  onUpdateProjectName(callback: (ctx: ReducerEventContext, projectId: string, name: string) => void) {
    this.connection.onReducer("UpdateProjectName", callback);
  }

  removeOnUpdateProjectName(callback: (ctx: ReducerEventContext, projectId: string, name: string) => void) {
    this.connection.offReducer("UpdateProjectName", callback);
  }

}

export class SetReducerFlags {
  addBlockFlags: __CallReducerFlags = 'FullUpdate';
  addBlock(flags: __CallReducerFlags) {
    this.addBlockFlags = flags;
  }

  addLayerFlags: __CallReducerFlags = 'FullUpdate';
  addLayer(flags: __CallReducerFlags) {
    this.addLayerFlags = flags;
  }

  changePublicAccessToProjectFlags: __CallReducerFlags = 'FullUpdate';
  changePublicAccessToProject(flags: __CallReducerFlags) {
    this.changePublicAccessToProjectFlags = flags;
  }

  changeUserAccessToProjectFlags: __CallReducerFlags = 'FullUpdate';
  changeUserAccessToProject(flags: __CallReducerFlags) {
    this.changeUserAccessToProjectFlags = flags;
  }

  createProjectFlags: __CallReducerFlags = 'FullUpdate';
  createProject(flags: __CallReducerFlags) {
    this.createProjectFlags = flags;
  }

  deleteBlockFlags: __CallReducerFlags = 'FullUpdate';
  deleteBlock(flags: __CallReducerFlags) {
    this.deleteBlockFlags = flags;
  }

  deleteLayerFlags: __CallReducerFlags = 'FullUpdate';
  deleteLayer(flags: __CallReducerFlags) {
    this.deleteLayerFlags = flags;
  }

  initializeBlocksFlags: __CallReducerFlags = 'FullUpdate';
  initializeBlocks(flags: __CallReducerFlags) {
    this.initializeBlocksFlags = flags;
  }

  inviteToProjectFlags: __CallReducerFlags = 'FullUpdate';
  inviteToProject(flags: __CallReducerFlags) {
    this.inviteToProjectFlags = flags;
  }

  magicSelectFlags: __CallReducerFlags = 'FullUpdate';
  magicSelect(flags: __CallReducerFlags) {
    this.magicSelectFlags = flags;
  }

  modifyBlockAmorphousFlags: __CallReducerFlags = 'FullUpdate';
  modifyBlockAmorphous(flags: __CallReducerFlags) {
    this.modifyBlockAmorphousFlags = flags;
  }

  pokeProjectFlags: __CallReducerFlags = 'FullUpdate';
  pokeProject(flags: __CallReducerFlags) {
    this.pokeProjectFlags = flags;
  }

  reorderLayersFlags: __CallReducerFlags = 'FullUpdate';
  reorderLayers(flags: __CallReducerFlags) {
    this.reorderLayersFlags = flags;
  }

  syncUserFlags: __CallReducerFlags = 'FullUpdate';
  syncUser(flags: __CallReducerFlags) {
    this.syncUserFlags = flags;
  }

  toggleLayerLockFlags: __CallReducerFlags = 'FullUpdate';
  toggleLayerLock(flags: __CallReducerFlags) {
    this.toggleLayerLockFlags = flags;
  }

  toggleLayerVisibilityFlags: __CallReducerFlags = 'FullUpdate';
  toggleLayerVisibility(flags: __CallReducerFlags) {
    this.toggleLayerVisibilityFlags = flags;
  }

  undoEditFlags: __CallReducerFlags = 'FullUpdate';
  undoEdit(flags: __CallReducerFlags) {
    this.undoEditFlags = flags;
  }

  updateBlockFlags: __CallReducerFlags = 'FullUpdate';
  updateBlock(flags: __CallReducerFlags) {
    this.updateBlockFlags = flags;
  }

  updateCursorPosFlags: __CallReducerFlags = 'FullUpdate';
  updateCursorPos(flags: __CallReducerFlags) {
    this.updateCursorPosFlags = flags;
  }

  updateProjectNameFlags: __CallReducerFlags = 'FullUpdate';
  updateProjectName(flags: __CallReducerFlags) {
    this.updateProjectNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get chunk(): ChunkTableHandle {
    // clientCache is a private property
    return new ChunkTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Chunk>(REMOTE_MODULE.tables.chunk));
  }

  get layer(): LayerTableHandle {
    // clientCache is a private property
    return new LayerTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Layer>(REMOTE_MODULE.tables.layer));
  }

  get playerCursor(): PlayerCursorTableHandle {
    // clientCache is a private property
    return new PlayerCursorTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<PlayerCursor>(REMOTE_MODULE.tables.player_cursor));
  }

  get projectBlocks(): ProjectBlocksTableHandle {
    // clientCache is a private property
    return new ProjectBlocksTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<ProjectBlocks>(REMOTE_MODULE.tables.project_blocks));
  }

  get projects(): ProjectsTableHandle {
    // clientCache is a private property
    return new ProjectsTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Project>(REMOTE_MODULE.tables.projects));
  }

  get selections(): SelectionsTableHandle {
    // clientCache is a private property
    return new SelectionsTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Selection>(REMOTE_MODULE.tables.selections));
  }

  get user(): UserTableHandle {
    // clientCache is a private property
    return new UserTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }

  get userProjects(): UserProjectsTableHandle {
    // clientCache is a private property
    return new UserProjectsTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<UserProject>(REMOTE_MODULE.tables.user_projects));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
