// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddColorToPalette } from "./add_color_to_palette_reducer.ts";
export { AddColorToPalette };
import { BuildBlock } from "./build_block_reducer.ts";
export { BuildBlock };
import { CreateWorld } from "./create_world_reducer.ts";
export { CreateWorld };
import { EraseBlock } from "./erase_block_reducer.ts";
export { EraseBlock };
import { InitializePalette } from "./initialize_palette_reducer.ts";
export { InitializePalette };
import { PaintBlock } from "./paint_block_reducer.ts";
export { PaintBlock };
import { RemoveColorFromPalette } from "./remove_color_from_palette_reducer.ts";
export { RemoveColorFromPalette };
import { SelectColorIndex } from "./select_color_index_reducer.ts";
export { SelectColorIndex };
import { VisitWorld } from "./visit_world_reducer.ts";
export { VisitWorld };

// Import and reexport all table handle types
import { ChunkTableHandle } from "./chunk_table.ts";
export { ChunkTableHandle };
import { ColorPaletteTableHandle } from "./color_palette_table.ts";
export { ColorPaletteTableHandle };
import { PlayerInWorldTableHandle } from "./player_in_world_table.ts";
export { PlayerInWorldTableHandle };
import { PreviewVoxelsTableHandle } from "./preview_voxels_table.ts";
export { PreviewVoxelsTableHandle };
import { WorldTableHandle } from "./world_table.ts";
export { WorldTableHandle };

// Import and reexport all types
import { Block } from "./block_type.ts";
export { Block };
import { BlockType } from "./block_type_type.ts";
export { BlockType };
import { Chunk } from "./chunk_type.ts";
export { Chunk };
import { ColorPalette } from "./color_palette_type.ts";
export { ColorPalette };
import { PlayerInWorld } from "./player_in_world_type.ts";
export { PlayerInWorld };
import { PreviewVoxels } from "./preview_voxels_type.ts";
export { PreviewVoxels };
import { Vector3 } from "./vector_3_type.ts";
export { Vector3 };
import { World } from "./world_type.ts";
export { World };

const REMOTE_MODULE = {
  tables: {
    Chunk: {
      tableName: "Chunk",
      rowType: Chunk.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    ColorPalette: {
      tableName: "ColorPalette",
      rowType: ColorPalette.getTypeScriptAlgebraicType(),
      primaryKey: "world",
    },
    PlayerInWorld: {
      tableName: "PlayerInWorld",
      rowType: PlayerInWorld.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    PreviewVoxels: {
      tableName: "PreviewVoxels",
      rowType: PreviewVoxels.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    World: {
      tableName: "World",
      rowType: World.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    AddColorToPalette: {
      reducerName: "AddColorToPalette",
      argsType: AddColorToPalette.getTypeScriptAlgebraicType(),
    },
    BuildBlock: {
      reducerName: "BuildBlock",
      argsType: BuildBlock.getTypeScriptAlgebraicType(),
    },
    CreateWorld: {
      reducerName: "CreateWorld",
      argsType: CreateWorld.getTypeScriptAlgebraicType(),
    },
    EraseBlock: {
      reducerName: "EraseBlock",
      argsType: EraseBlock.getTypeScriptAlgebraicType(),
    },
    InitializePalette: {
      reducerName: "InitializePalette",
      argsType: InitializePalette.getTypeScriptAlgebraicType(),
    },
    PaintBlock: {
      reducerName: "PaintBlock",
      argsType: PaintBlock.getTypeScriptAlgebraicType(),
    },
    RemoveColorFromPalette: {
      reducerName: "RemoveColorFromPalette",
      argsType: RemoveColorFromPalette.getTypeScriptAlgebraicType(),
    },
    SelectColorIndex: {
      reducerName: "SelectColorIndex",
      argsType: SelectColorIndex.getTypeScriptAlgebraicType(),
    },
    VisitWorld: {
      reducerName: "VisitWorld",
      argsType: VisitWorld.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddColorToPalette", args: AddColorToPalette }
| { name: "BuildBlock", args: BuildBlock }
| { name: "CreateWorld", args: CreateWorld }
| { name: "EraseBlock", args: EraseBlock }
| { name: "InitializePalette", args: InitializePalette }
| { name: "PaintBlock", args: PaintBlock }
| { name: "RemoveColorFromPalette", args: RemoveColorFromPalette }
| { name: "SelectColorIndex", args: SelectColorIndex }
| { name: "VisitWorld", args: VisitWorld }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addColorToPalette(worldId: string, colorHex: string) {
    const __args = { worldId, colorHex };
    let __writer = new BinaryWriter(1024);
    AddColorToPalette.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddColorToPalette", __argsBuffer, this.setCallReducerFlags.addColorToPaletteFlags);
  }

  onAddColorToPalette(callback: (ctx: ReducerEventContext, worldId: string, colorHex: string) => void) {
    this.connection.onReducer("AddColorToPalette", callback);
  }

  removeOnAddColorToPalette(callback: (ctx: ReducerEventContext, worldId: string, colorHex: string) => void) {
    this.connection.offReducer("AddColorToPalette", callback);
  }

  buildBlock(world: string, type: BlockType, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, isPreview: boolean) {
    const __args = { world, type, x1, y1, z1, x2, y2, z2, isPreview };
    let __writer = new BinaryWriter(1024);
    BuildBlock.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("BuildBlock", __argsBuffer, this.setCallReducerFlags.buildBlockFlags);
  }

  onBuildBlock(callback: (ctx: ReducerEventContext, world: string, type: BlockType, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, isPreview: boolean) => void) {
    this.connection.onReducer("BuildBlock", callback);
  }

  removeOnBuildBlock(callback: (ctx: ReducerEventContext, world: string, type: BlockType, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, isPreview: boolean) => void) {
    this.connection.offReducer("BuildBlock", callback);
  }

  createWorld(name: string, xDim: number, yDim: number, zDim: number) {
    const __args = { name, xDim, yDim, zDim };
    let __writer = new BinaryWriter(1024);
    CreateWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateWorld", __argsBuffer, this.setCallReducerFlags.createWorldFlags);
  }

  onCreateWorld(callback: (ctx: ReducerEventContext, name: string, xDim: number, yDim: number, zDim: number) => void) {
    this.connection.onReducer("CreateWorld", callback);
  }

  removeOnCreateWorld(callback: (ctx: ReducerEventContext, name: string, xDim: number, yDim: number, zDim: number) => void) {
    this.connection.offReducer("CreateWorld", callback);
  }

  eraseBlock(world: string, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, isPreview: boolean) {
    const __args = { world, x1, y1, z1, x2, y2, z2, isPreview };
    let __writer = new BinaryWriter(1024);
    EraseBlock.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("EraseBlock", __argsBuffer, this.setCallReducerFlags.eraseBlockFlags);
  }

  onEraseBlock(callback: (ctx: ReducerEventContext, world: string, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, isPreview: boolean) => void) {
    this.connection.onReducer("EraseBlock", callback);
  }

  removeOnEraseBlock(callback: (ctx: ReducerEventContext, world: string, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, isPreview: boolean) => void) {
    this.connection.offReducer("EraseBlock", callback);
  }

  initializePalette(worldId: string) {
    const __args = { worldId };
    let __writer = new BinaryWriter(1024);
    InitializePalette.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InitializePalette", __argsBuffer, this.setCallReducerFlags.initializePaletteFlags);
  }

  onInitializePalette(callback: (ctx: ReducerEventContext, worldId: string) => void) {
    this.connection.onReducer("InitializePalette", callback);
  }

  removeOnInitializePalette(callback: (ctx: ReducerEventContext, worldId: string) => void) {
    this.connection.offReducer("InitializePalette", callback);
  }

  paintBlock(world: string, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, isPreview: boolean) {
    const __args = { world, x1, y1, z1, x2, y2, z2, isPreview };
    let __writer = new BinaryWriter(1024);
    PaintBlock.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("PaintBlock", __argsBuffer, this.setCallReducerFlags.paintBlockFlags);
  }

  onPaintBlock(callback: (ctx: ReducerEventContext, world: string, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, isPreview: boolean) => void) {
    this.connection.onReducer("PaintBlock", callback);
  }

  removeOnPaintBlock(callback: (ctx: ReducerEventContext, world: string, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, isPreview: boolean) => void) {
    this.connection.offReducer("PaintBlock", callback);
  }

  removeColorFromPalette(worldId: string, colorHex: string) {
    const __args = { worldId, colorHex };
    let __writer = new BinaryWriter(1024);
    RemoveColorFromPalette.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RemoveColorFromPalette", __argsBuffer, this.setCallReducerFlags.removeColorFromPaletteFlags);
  }

  onRemoveColorFromPalette(callback: (ctx: ReducerEventContext, worldId: string, colorHex: string) => void) {
    this.connection.onReducer("RemoveColorFromPalette", callback);
  }

  removeOnRemoveColorFromPalette(callback: (ctx: ReducerEventContext, worldId: string, colorHex: string) => void) {
    this.connection.offReducer("RemoveColorFromPalette", callback);
  }

  selectColorIndex(worldId: string, colorIndex: number) {
    const __args = { worldId, colorIndex };
    let __writer = new BinaryWriter(1024);
    SelectColorIndex.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SelectColorIndex", __argsBuffer, this.setCallReducerFlags.selectColorIndexFlags);
  }

  onSelectColorIndex(callback: (ctx: ReducerEventContext, worldId: string, colorIndex: number) => void) {
    this.connection.onReducer("SelectColorIndex", callback);
  }

  removeOnSelectColorIndex(callback: (ctx: ReducerEventContext, worldId: string, colorIndex: number) => void) {
    this.connection.offReducer("SelectColorIndex", callback);
  }

  visitWorld(worldId: string) {
    const __args = { worldId };
    let __writer = new BinaryWriter(1024);
    VisitWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("VisitWorld", __argsBuffer, this.setCallReducerFlags.visitWorldFlags);
  }

  onVisitWorld(callback: (ctx: ReducerEventContext, worldId: string) => void) {
    this.connection.onReducer("VisitWorld", callback);
  }

  removeOnVisitWorld(callback: (ctx: ReducerEventContext, worldId: string) => void) {
    this.connection.offReducer("VisitWorld", callback);
  }

}

export class SetReducerFlags {
  addColorToPaletteFlags: CallReducerFlags = 'FullUpdate';
  addColorToPalette(flags: CallReducerFlags) {
    this.addColorToPaletteFlags = flags;
  }

  buildBlockFlags: CallReducerFlags = 'FullUpdate';
  buildBlock(flags: CallReducerFlags) {
    this.buildBlockFlags = flags;
  }

  createWorldFlags: CallReducerFlags = 'FullUpdate';
  createWorld(flags: CallReducerFlags) {
    this.createWorldFlags = flags;
  }

  eraseBlockFlags: CallReducerFlags = 'FullUpdate';
  eraseBlock(flags: CallReducerFlags) {
    this.eraseBlockFlags = flags;
  }

  initializePaletteFlags: CallReducerFlags = 'FullUpdate';
  initializePalette(flags: CallReducerFlags) {
    this.initializePaletteFlags = flags;
  }

  paintBlockFlags: CallReducerFlags = 'FullUpdate';
  paintBlock(flags: CallReducerFlags) {
    this.paintBlockFlags = flags;
  }

  removeColorFromPaletteFlags: CallReducerFlags = 'FullUpdate';
  removeColorFromPalette(flags: CallReducerFlags) {
    this.removeColorFromPaletteFlags = flags;
  }

  selectColorIndexFlags: CallReducerFlags = 'FullUpdate';
  selectColorIndex(flags: CallReducerFlags) {
    this.selectColorIndexFlags = flags;
  }

  visitWorldFlags: CallReducerFlags = 'FullUpdate';
  visitWorld(flags: CallReducerFlags) {
    this.visitWorldFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get chunk(): ChunkTableHandle {
    return new ChunkTableHandle(this.connection.clientCache.getOrCreateTable<Chunk>(REMOTE_MODULE.tables.Chunk));
  }

  get colorPalette(): ColorPaletteTableHandle {
    return new ColorPaletteTableHandle(this.connection.clientCache.getOrCreateTable<ColorPalette>(REMOTE_MODULE.tables.ColorPalette));
  }

  get playerInWorld(): PlayerInWorldTableHandle {
    return new PlayerInWorldTableHandle(this.connection.clientCache.getOrCreateTable<PlayerInWorld>(REMOTE_MODULE.tables.PlayerInWorld));
  }

  get previewVoxels(): PreviewVoxelsTableHandle {
    return new PreviewVoxelsTableHandle(this.connection.clientCache.getOrCreateTable<PreviewVoxels>(REMOTE_MODULE.tables.PreviewVoxels));
  }

  get world(): WorldTableHandle {
    return new WorldTableHandle(this.connection.clientCache.getOrCreateTable<World>(REMOTE_MODULE.tables.World));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
