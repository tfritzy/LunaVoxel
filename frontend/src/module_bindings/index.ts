// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ChangePublicAccessToProject } from "./change_public_access_to_project_reducer.ts";
export { ChangePublicAccessToProject };
import { ChangeUserAccessToProject } from "./change_user_access_to_project_reducer.ts";
export { ChangeUserAccessToProject };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CreateProject } from "./create_project_reducer.ts";
export { CreateProject };
import { InitializeAtlas } from "./initialize_atlas_reducer.ts";
export { InitializeAtlas };
import { InviteToProject } from "./invite_to_project_reducer.ts";
export { InviteToProject };
import { ModifyBlock } from "./modify_block_reducer.ts";
export { ModifyBlock };
import { ModifyBlockRect } from "./modify_block_rect_reducer.ts";
export { ModifyBlockRect };
import { PokeProject } from "./poke_project_reducer.ts";
export { PokeProject };
import { RemoveColorFromPalette } from "./remove_color_from_palette_reducer.ts";
export { RemoveColorFromPalette };
import { ReplacePalette } from "./replace_palette_reducer.ts";
export { ReplacePalette };
import { SyncUser } from "./sync_user_reducer.ts";
export { SyncUser };
import { UpdateAtlas } from "./update_atlas_reducer.ts";
export { UpdateAtlas };
import { UpdateCursorPos } from "./update_cursor_pos_reducer.ts";
export { UpdateCursorPos };
import { UpdateProjectName } from "./update_project_name_reducer.ts";
export { UpdateProjectName };

// Import and reexport all table handle types
import { AtlasTableHandle } from "./atlas_table.ts";
export { AtlasTableHandle };
import { ChunkTableHandle } from "./chunk_table.ts";
export { ChunkTableHandle };
import { ColorPaletteTableHandle } from "./color_palette_table.ts";
export { ColorPaletteTableHandle };
import { PlayerCursorTableHandle } from "./player_cursor_table.ts";
export { PlayerCursorTableHandle };
import { ProjectsTableHandle } from "./projects_table.ts";
export { ProjectsTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };
import { UserProjectsTableHandle } from "./user_projects_table.ts";
export { UserProjectsTableHandle };

// Import and reexport all types
import { AccessType } from "./access_type_type.ts";
export { AccessType };
import { Atlas } from "./atlas_type.ts";
export { Atlas };
import { BlockBlueprint } from "./block_blueprint_type.ts";
export { BlockBlueprint };
import { BlockModificationMode } from "./block_modification_mode_type.ts";
export { BlockModificationMode };
import { Chunk } from "./chunk_type.ts";
export { Chunk };
import { ColorPalette } from "./color_palette_type.ts";
export { ColorPalette };
import { Face } from "./face_type.ts";
export { Face };
import { PlayerCursor } from "./player_cursor_type.ts";
export { PlayerCursor };
import { Project } from "./project_type.ts";
export { Project };
import { User } from "./user_type.ts";
export { User };
import { UserProject } from "./user_project_type.ts";
export { UserProject };
import { Vector3 } from "./vector_3_type.ts";
export { Vector3 };
import { Vector3Float } from "./vector_3_float_type.ts";
export { Vector3Float };

const REMOTE_MODULE = {
  tables: {
    atlas: {
      tableName: "atlas",
      rowType: Atlas.getTypeScriptAlgebraicType(),
      primaryKey: "projectId",
    },
    chunk: {
      tableName: "chunk",
      rowType: Chunk.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    color_palette: {
      tableName: "color_palette",
      rowType: ColorPalette.getTypeScriptAlgebraicType(),
      primaryKey: "projectId",
    },
    player_cursor: {
      tableName: "player_cursor",
      rowType: PlayerCursor.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    projects: {
      tableName: "projects",
      rowType: Project.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    user_projects: {
      tableName: "user_projects",
      rowType: UserProject.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    ChangePublicAccessToProject: {
      reducerName: "ChangePublicAccessToProject",
      argsType: ChangePublicAccessToProject.getTypeScriptAlgebraicType(),
    },
    ChangeUserAccessToProject: {
      reducerName: "ChangeUserAccessToProject",
      argsType: ChangeUserAccessToProject.getTypeScriptAlgebraicType(),
    },
    ClientConnected: {
      reducerName: "ClientConnected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    ClientDisconnected: {
      reducerName: "ClientDisconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    CreateProject: {
      reducerName: "CreateProject",
      argsType: CreateProject.getTypeScriptAlgebraicType(),
    },
    InitializeAtlas: {
      reducerName: "InitializeAtlas",
      argsType: InitializeAtlas.getTypeScriptAlgebraicType(),
    },
    InviteToProject: {
      reducerName: "InviteToProject",
      argsType: InviteToProject.getTypeScriptAlgebraicType(),
    },
    ModifyBlock: {
      reducerName: "ModifyBlock",
      argsType: ModifyBlock.getTypeScriptAlgebraicType(),
    },
    ModifyBlockRect: {
      reducerName: "ModifyBlockRect",
      argsType: ModifyBlockRect.getTypeScriptAlgebraicType(),
    },
    PokeProject: {
      reducerName: "PokeProject",
      argsType: PokeProject.getTypeScriptAlgebraicType(),
    },
    RemoveColorFromPalette: {
      reducerName: "RemoveColorFromPalette",
      argsType: RemoveColorFromPalette.getTypeScriptAlgebraicType(),
    },
    ReplacePalette: {
      reducerName: "ReplacePalette",
      argsType: ReplacePalette.getTypeScriptAlgebraicType(),
    },
    SyncUser: {
      reducerName: "SyncUser",
      argsType: SyncUser.getTypeScriptAlgebraicType(),
    },
    UpdateAtlas: {
      reducerName: "UpdateAtlas",
      argsType: UpdateAtlas.getTypeScriptAlgebraicType(),
    },
    UpdateCursorPos: {
      reducerName: "UpdateCursorPos",
      argsType: UpdateCursorPos.getTypeScriptAlgebraicType(),
    },
    UpdateProjectName: {
      reducerName: "UpdateProjectName",
      argsType: UpdateProjectName.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ChangePublicAccessToProject", args: ChangePublicAccessToProject }
| { name: "ChangeUserAccessToProject", args: ChangeUserAccessToProject }
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CreateProject", args: CreateProject }
| { name: "InitializeAtlas", args: InitializeAtlas }
| { name: "InviteToProject", args: InviteToProject }
| { name: "ModifyBlock", args: ModifyBlock }
| { name: "ModifyBlockRect", args: ModifyBlockRect }
| { name: "PokeProject", args: PokeProject }
| { name: "RemoveColorFromPalette", args: RemoveColorFromPalette }
| { name: "ReplacePalette", args: ReplacePalette }
| { name: "SyncUser", args: SyncUser }
| { name: "UpdateAtlas", args: UpdateAtlas }
| { name: "UpdateCursorPos", args: UpdateCursorPos }
| { name: "UpdateProjectName", args: UpdateProjectName }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  changePublicAccessToProject(projectId: string, accessType: AccessType) {
    const __args = { projectId, accessType };
    let __writer = new BinaryWriter(1024);
    ChangePublicAccessToProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ChangePublicAccessToProject", __argsBuffer, this.setCallReducerFlags.changePublicAccessToProjectFlags);
  }

  onChangePublicAccessToProject(callback: (ctx: ReducerEventContext, projectId: string, accessType: AccessType) => void) {
    this.connection.onReducer("ChangePublicAccessToProject", callback);
  }

  removeOnChangePublicAccessToProject(callback: (ctx: ReducerEventContext, projectId: string, accessType: AccessType) => void) {
    this.connection.offReducer("ChangePublicAccessToProject", callback);
  }

  changeUserAccessToProject(projectId: string, email: string, accessType: AccessType) {
    const __args = { projectId, email, accessType };
    let __writer = new BinaryWriter(1024);
    ChangeUserAccessToProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ChangeUserAccessToProject", __argsBuffer, this.setCallReducerFlags.changeUserAccessToProjectFlags);
  }

  onChangeUserAccessToProject(callback: (ctx: ReducerEventContext, projectId: string, email: string, accessType: AccessType) => void) {
    this.connection.onReducer("ChangeUserAccessToProject", callback);
  }

  removeOnChangeUserAccessToProject(callback: (ctx: ReducerEventContext, projectId: string, email: string, accessType: AccessType) => void) {
    this.connection.offReducer("ChangeUserAccessToProject", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientConnected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientConnected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("ClientDisconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("ClientDisconnected", callback);
  }

  createProject(id: string, name: string, xDim: number, yDim: number, zDim: number) {
    const __args = { id, name, xDim, yDim, zDim };
    let __writer = new BinaryWriter(1024);
    CreateProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateProject", __argsBuffer, this.setCallReducerFlags.createProjectFlags);
  }

  onCreateProject(callback: (ctx: ReducerEventContext, id: string, name: string, xDim: number, yDim: number, zDim: number) => void) {
    this.connection.onReducer("CreateProject", callback);
  }

  removeOnCreateProject(callback: (ctx: ReducerEventContext, id: string, name: string, xDim: number, yDim: number, zDim: number) => void) {
    this.connection.offReducer("CreateProject", callback);
  }

  initializeAtlas(projectId: string) {
    const __args = { projectId };
    let __writer = new BinaryWriter(1024);
    InitializeAtlas.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InitializeAtlas", __argsBuffer, this.setCallReducerFlags.initializeAtlasFlags);
  }

  onInitializeAtlas(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.onReducer("InitializeAtlas", callback);
  }

  removeOnInitializeAtlas(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.offReducer("InitializeAtlas", callback);
  }

  inviteToProject(projectId: string, email: string, accessType: AccessType) {
    const __args = { projectId, email, accessType };
    let __writer = new BinaryWriter(1024);
    InviteToProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InviteToProject", __argsBuffer, this.setCallReducerFlags.inviteToProjectFlags);
  }

  onInviteToProject(callback: (ctx: ReducerEventContext, projectId: string, email: string, accessType: AccessType) => void) {
    this.connection.onReducer("InviteToProject", callback);
  }

  removeOnInviteToProject(callback: (ctx: ReducerEventContext, projectId: string, email: string, accessType: AccessType) => void) {
    this.connection.offReducer("InviteToProject", callback);
  }

  modifyBlock(projectId: string, mode: BlockModificationMode, blockType: number, positions: Vector3[], rotation: number) {
    const __args = { projectId, mode, blockType, positions, rotation };
    let __writer = new BinaryWriter(1024);
    ModifyBlock.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ModifyBlock", __argsBuffer, this.setCallReducerFlags.modifyBlockFlags);
  }

  onModifyBlock(callback: (ctx: ReducerEventContext, projectId: string, mode: BlockModificationMode, blockType: number, positions: Vector3[], rotation: number) => void) {
    this.connection.onReducer("ModifyBlock", callback);
  }

  removeOnModifyBlock(callback: (ctx: ReducerEventContext, projectId: string, mode: BlockModificationMode, blockType: number, positions: Vector3[], rotation: number) => void) {
    this.connection.offReducer("ModifyBlock", callback);
  }

  modifyBlockRect(projectId: string, mode: BlockModificationMode, type: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, rotation: number) {
    const __args = { projectId, mode, type, x1, y1, z1, x2, y2, z2, rotation };
    let __writer = new BinaryWriter(1024);
    ModifyBlockRect.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ModifyBlockRect", __argsBuffer, this.setCallReducerFlags.modifyBlockRectFlags);
  }

  onModifyBlockRect(callback: (ctx: ReducerEventContext, projectId: string, mode: BlockModificationMode, type: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, rotation: number) => void) {
    this.connection.onReducer("ModifyBlockRect", callback);
  }

  removeOnModifyBlockRect(callback: (ctx: ReducerEventContext, projectId: string, mode: BlockModificationMode, type: number, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, rotation: number) => void) {
    this.connection.offReducer("ModifyBlockRect", callback);
  }

  pokeProject(projectId: string) {
    const __args = { projectId };
    let __writer = new BinaryWriter(1024);
    PokeProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("PokeProject", __argsBuffer, this.setCallReducerFlags.pokeProjectFlags);
  }

  onPokeProject(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.onReducer("PokeProject", callback);
  }

  removeOnPokeProject(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.offReducer("PokeProject", callback);
  }

  removeColorFromPalette(projectId: string, colorIndex: number) {
    const __args = { projectId, colorIndex };
    let __writer = new BinaryWriter(1024);
    RemoveColorFromPalette.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RemoveColorFromPalette", __argsBuffer, this.setCallReducerFlags.removeColorFromPaletteFlags);
  }

  onRemoveColorFromPalette(callback: (ctx: ReducerEventContext, projectId: string, colorIndex: number) => void) {
    this.connection.onReducer("RemoveColorFromPalette", callback);
  }

  removeOnRemoveColorFromPalette(callback: (ctx: ReducerEventContext, projectId: string, colorIndex: number) => void) {
    this.connection.offReducer("RemoveColorFromPalette", callback);
  }

  replacePalette(projectId: string, colors: number[]) {
    const __args = { projectId, colors };
    let __writer = new BinaryWriter(1024);
    ReplacePalette.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ReplacePalette", __argsBuffer, this.setCallReducerFlags.replacePaletteFlags);
  }

  onReplacePalette(callback: (ctx: ReducerEventContext, projectId: string, colors: number[]) => void) {
    this.connection.onReducer("ReplacePalette", callback);
  }

  removeOnReplacePalette(callback: (ctx: ReducerEventContext, projectId: string, colors: number[]) => void) {
    this.connection.offReducer("ReplacePalette", callback);
  }

  syncUser(identityHex: string, email: string, name: string) {
    const __args = { identityHex, email, name };
    let __writer = new BinaryWriter(1024);
    SyncUser.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("SyncUser", __argsBuffer, this.setCallReducerFlags.syncUserFlags);
  }

  onSyncUser(callback: (ctx: ReducerEventContext, identityHex: string, email: string, name: string) => void) {
    this.connection.onReducer("SyncUser", callback);
  }

  removeOnSyncUser(callback: (ctx: ReducerEventContext, identityHex: string, email: string, name: string) => void) {
    this.connection.offReducer("SyncUser", callback);
  }

  updateAtlas(projectId: string, newSize: number, cellSize: number) {
    const __args = { projectId, newSize, cellSize };
    let __writer = new BinaryWriter(1024);
    UpdateAtlas.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateAtlas", __argsBuffer, this.setCallReducerFlags.updateAtlasFlags);
  }

  onUpdateAtlas(callback: (ctx: ReducerEventContext, projectId: string, newSize: number, cellSize: number) => void) {
    this.connection.onReducer("UpdateAtlas", callback);
  }

  removeOnUpdateAtlas(callback: (ctx: ReducerEventContext, projectId: string, newSize: number, cellSize: number) => void) {
    this.connection.offReducer("UpdateAtlas", callback);
  }

  updateCursorPos(projectId: string, identity: Identity, x: number, y: number, z: number, nx: number, ny: number, nz: number) {
    const __args = { projectId, identity, x, y, z, nx, ny, nz };
    let __writer = new BinaryWriter(1024);
    UpdateCursorPos.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateCursorPos", __argsBuffer, this.setCallReducerFlags.updateCursorPosFlags);
  }

  onUpdateCursorPos(callback: (ctx: ReducerEventContext, projectId: string, identity: Identity, x: number, y: number, z: number, nx: number, ny: number, nz: number) => void) {
    this.connection.onReducer("UpdateCursorPos", callback);
  }

  removeOnUpdateCursorPos(callback: (ctx: ReducerEventContext, projectId: string, identity: Identity, x: number, y: number, z: number, nx: number, ny: number, nz: number) => void) {
    this.connection.offReducer("UpdateCursorPos", callback);
  }

  updateProjectName(projectId: string, name: string) {
    const __args = { projectId, name };
    let __writer = new BinaryWriter(1024);
    UpdateProjectName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateProjectName", __argsBuffer, this.setCallReducerFlags.updateProjectNameFlags);
  }

  onUpdateProjectName(callback: (ctx: ReducerEventContext, projectId: string, name: string) => void) {
    this.connection.onReducer("UpdateProjectName", callback);
  }

  removeOnUpdateProjectName(callback: (ctx: ReducerEventContext, projectId: string, name: string) => void) {
    this.connection.offReducer("UpdateProjectName", callback);
  }

}

export class SetReducerFlags {
  changePublicAccessToProjectFlags: CallReducerFlags = 'FullUpdate';
  changePublicAccessToProject(flags: CallReducerFlags) {
    this.changePublicAccessToProjectFlags = flags;
  }

  changeUserAccessToProjectFlags: CallReducerFlags = 'FullUpdate';
  changeUserAccessToProject(flags: CallReducerFlags) {
    this.changeUserAccessToProjectFlags = flags;
  }

  createProjectFlags: CallReducerFlags = 'FullUpdate';
  createProject(flags: CallReducerFlags) {
    this.createProjectFlags = flags;
  }

  initializeAtlasFlags: CallReducerFlags = 'FullUpdate';
  initializeAtlas(flags: CallReducerFlags) {
    this.initializeAtlasFlags = flags;
  }

  inviteToProjectFlags: CallReducerFlags = 'FullUpdate';
  inviteToProject(flags: CallReducerFlags) {
    this.inviteToProjectFlags = flags;
  }

  modifyBlockFlags: CallReducerFlags = 'FullUpdate';
  modifyBlock(flags: CallReducerFlags) {
    this.modifyBlockFlags = flags;
  }

  modifyBlockRectFlags: CallReducerFlags = 'FullUpdate';
  modifyBlockRect(flags: CallReducerFlags) {
    this.modifyBlockRectFlags = flags;
  }

  pokeProjectFlags: CallReducerFlags = 'FullUpdate';
  pokeProject(flags: CallReducerFlags) {
    this.pokeProjectFlags = flags;
  }

  removeColorFromPaletteFlags: CallReducerFlags = 'FullUpdate';
  removeColorFromPalette(flags: CallReducerFlags) {
    this.removeColorFromPaletteFlags = flags;
  }

  replacePaletteFlags: CallReducerFlags = 'FullUpdate';
  replacePalette(flags: CallReducerFlags) {
    this.replacePaletteFlags = flags;
  }

  syncUserFlags: CallReducerFlags = 'FullUpdate';
  syncUser(flags: CallReducerFlags) {
    this.syncUserFlags = flags;
  }

  updateAtlasFlags: CallReducerFlags = 'FullUpdate';
  updateAtlas(flags: CallReducerFlags) {
    this.updateAtlasFlags = flags;
  }

  updateCursorPosFlags: CallReducerFlags = 'FullUpdate';
  updateCursorPos(flags: CallReducerFlags) {
    this.updateCursorPosFlags = flags;
  }

  updateProjectNameFlags: CallReducerFlags = 'FullUpdate';
  updateProjectName(flags: CallReducerFlags) {
    this.updateProjectNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get atlas(): AtlasTableHandle {
    return new AtlasTableHandle(this.connection.clientCache.getOrCreateTable<Atlas>(REMOTE_MODULE.tables.atlas));
  }

  get chunk(): ChunkTableHandle {
    return new ChunkTableHandle(this.connection.clientCache.getOrCreateTable<Chunk>(REMOTE_MODULE.tables.chunk));
  }

  get colorPalette(): ColorPaletteTableHandle {
    return new ColorPaletteTableHandle(this.connection.clientCache.getOrCreateTable<ColorPalette>(REMOTE_MODULE.tables.color_palette));
  }

  get playerCursor(): PlayerCursorTableHandle {
    return new PlayerCursorTableHandle(this.connection.clientCache.getOrCreateTable<PlayerCursor>(REMOTE_MODULE.tables.player_cursor));
  }

  get projects(): ProjectsTableHandle {
    return new ProjectsTableHandle(this.connection.clientCache.getOrCreateTable<Project>(REMOTE_MODULE.tables.projects));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }

  get userProjects(): UserProjectsTableHandle {
    return new UserProjectsTableHandle(this.connection.clientCache.getOrCreateTable<UserProject>(REMOTE_MODULE.tables.user_projects));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
