// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddColorToPalette } from "./add_color_to_palette_reducer.ts";
export { AddColorToPalette };
import { CreateProject } from "./create_project_reducer.ts";
export { CreateProject };
import { InitializePalette } from "./initialize_palette_reducer.ts";
export { InitializePalette };
import { ModifyBlock } from "./modify_block_reducer.ts";
export { ModifyBlock };
import { ModifyBlockRect } from "./modify_block_rect_reducer.ts";
export { ModifyBlockRect };
import { RemoveColorFromPalette } from "./remove_color_from_palette_reducer.ts";
export { RemoveColorFromPalette };
import { ReplacePalette } from "./replace_palette_reducer.ts";
export { ReplacePalette };
import { UpdateProjectName } from "./update_project_name_reducer.ts";
export { UpdateProjectName };

// Import and reexport all table handle types
import { ChunkTableHandle } from "./chunk_table.ts";
export { ChunkTableHandle };
import { ColorPaletteTableHandle } from "./color_palette_table.ts";
export { ColorPaletteTableHandle };
import { ProjectsTableHandle } from "./projects_table.ts";
export { ProjectsTableHandle };
import { UserProjectsTableHandle } from "./user_projects_table.ts";
export { UserProjectsTableHandle };

// Import and reexport all types
import { AccessType } from "./access_type_type.ts";
export { AccessType };
import { BlockModificationMode } from "./block_modification_mode_type.ts";
export { BlockModificationMode };
import { BlockRun } from "./block_run_type.ts";
export { BlockRun };
import { Chunk } from "./chunk_type.ts";
export { Chunk };
import { ColorPalette } from "./color_palette_type.ts";
export { ColorPalette };
import { MeshType } from "./mesh_type_type.ts";
export { MeshType };
import { Project } from "./project_type.ts";
export { Project };
import { UserProject } from "./user_project_type.ts";
export { UserProject };
import { Vector3 } from "./vector_3_type.ts";
export { Vector3 };

const REMOTE_MODULE = {
  tables: {
    chunk: {
      tableName: "chunk",
      rowType: Chunk.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    color_palette: {
      tableName: "color_palette",
      rowType: ColorPalette.getTypeScriptAlgebraicType(),
      primaryKey: "projectId",
    },
    projects: {
      tableName: "projects",
      rowType: Project.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    user_projects: {
      tableName: "user_projects",
      rowType: UserProject.getTypeScriptAlgebraicType(),
    },
  },
  reducers: {
    AddColorToPalette: {
      reducerName: "AddColorToPalette",
      argsType: AddColorToPalette.getTypeScriptAlgebraicType(),
    },
    CreateProject: {
      reducerName: "CreateProject",
      argsType: CreateProject.getTypeScriptAlgebraicType(),
    },
    InitializePalette: {
      reducerName: "InitializePalette",
      argsType: InitializePalette.getTypeScriptAlgebraicType(),
    },
    ModifyBlock: {
      reducerName: "ModifyBlock",
      argsType: ModifyBlock.getTypeScriptAlgebraicType(),
    },
    ModifyBlockRect: {
      reducerName: "ModifyBlockRect",
      argsType: ModifyBlockRect.getTypeScriptAlgebraicType(),
    },
    RemoveColorFromPalette: {
      reducerName: "RemoveColorFromPalette",
      argsType: RemoveColorFromPalette.getTypeScriptAlgebraicType(),
    },
    ReplacePalette: {
      reducerName: "ReplacePalette",
      argsType: ReplacePalette.getTypeScriptAlgebraicType(),
    },
    UpdateProjectName: {
      reducerName: "UpdateProjectName",
      argsType: UpdateProjectName.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddColorToPalette", args: AddColorToPalette }
| { name: "CreateProject", args: CreateProject }
| { name: "InitializePalette", args: InitializePalette }
| { name: "ModifyBlock", args: ModifyBlock }
| { name: "ModifyBlockRect", args: ModifyBlockRect }
| { name: "RemoveColorFromPalette", args: RemoveColorFromPalette }
| { name: "ReplacePalette", args: ReplacePalette }
| { name: "UpdateProjectName", args: UpdateProjectName }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addColorToPalette(projectId: string, color: number) {
    const __args = { projectId, color };
    let __writer = new BinaryWriter(1024);
    AddColorToPalette.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("AddColorToPalette", __argsBuffer, this.setCallReducerFlags.addColorToPaletteFlags);
  }

  onAddColorToPalette(callback: (ctx: ReducerEventContext, projectId: string, color: number) => void) {
    this.connection.onReducer("AddColorToPalette", callback);
  }

  removeOnAddColorToPalette(callback: (ctx: ReducerEventContext, projectId: string, color: number) => void) {
    this.connection.offReducer("AddColorToPalette", callback);
  }

  createProject(id: string, name: string, xDim: number, yDim: number, zDim: number) {
    const __args = { id, name, xDim, yDim, zDim };
    let __writer = new BinaryWriter(1024);
    CreateProject.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("CreateProject", __argsBuffer, this.setCallReducerFlags.createProjectFlags);
  }

  onCreateProject(callback: (ctx: ReducerEventContext, id: string, name: string, xDim: number, yDim: number, zDim: number) => void) {
    this.connection.onReducer("CreateProject", callback);
  }

  removeOnCreateProject(callback: (ctx: ReducerEventContext, id: string, name: string, xDim: number, yDim: number, zDim: number) => void) {
    this.connection.offReducer("CreateProject", callback);
  }

  initializePalette(projectId: string) {
    const __args = { projectId };
    let __writer = new BinaryWriter(1024);
    InitializePalette.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("InitializePalette", __argsBuffer, this.setCallReducerFlags.initializePaletteFlags);
  }

  onInitializePalette(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.onReducer("InitializePalette", callback);
  }

  removeOnInitializePalette(callback: (ctx: ReducerEventContext, projectId: string) => void) {
    this.connection.offReducer("InitializePalette", callback);
  }

  modifyBlock(projectId: string, mode: BlockModificationMode, type: MeshType, positions: Vector3[], color: number) {
    const __args = { projectId, mode, type, positions, color };
    let __writer = new BinaryWriter(1024);
    ModifyBlock.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ModifyBlock", __argsBuffer, this.setCallReducerFlags.modifyBlockFlags);
  }

  onModifyBlock(callback: (ctx: ReducerEventContext, projectId: string, mode: BlockModificationMode, type: MeshType, positions: Vector3[], color: number) => void) {
    this.connection.onReducer("ModifyBlock", callback);
  }

  removeOnModifyBlock(callback: (ctx: ReducerEventContext, projectId: string, mode: BlockModificationMode, type: MeshType, positions: Vector3[], color: number) => void) {
    this.connection.offReducer("ModifyBlock", callback);
  }

  modifyBlockRect(projectId: string, mode: BlockModificationMode, type: MeshType, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number) {
    const __args = { projectId, mode, type, x1, y1, z1, x2, y2, z2, color };
    let __writer = new BinaryWriter(1024);
    ModifyBlockRect.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ModifyBlockRect", __argsBuffer, this.setCallReducerFlags.modifyBlockRectFlags);
  }

  onModifyBlockRect(callback: (ctx: ReducerEventContext, projectId: string, mode: BlockModificationMode, type: MeshType, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number) => void) {
    this.connection.onReducer("ModifyBlockRect", callback);
  }

  removeOnModifyBlockRect(callback: (ctx: ReducerEventContext, projectId: string, mode: BlockModificationMode, type: MeshType, x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, color: number) => void) {
    this.connection.offReducer("ModifyBlockRect", callback);
  }

  removeColorFromPalette(projectId: string, colorIndex: number) {
    const __args = { projectId, colorIndex };
    let __writer = new BinaryWriter(1024);
    RemoveColorFromPalette.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("RemoveColorFromPalette", __argsBuffer, this.setCallReducerFlags.removeColorFromPaletteFlags);
  }

  onRemoveColorFromPalette(callback: (ctx: ReducerEventContext, projectId: string, colorIndex: number) => void) {
    this.connection.onReducer("RemoveColorFromPalette", callback);
  }

  removeOnRemoveColorFromPalette(callback: (ctx: ReducerEventContext, projectId: string, colorIndex: number) => void) {
    this.connection.offReducer("RemoveColorFromPalette", callback);
  }

  replacePalette(projectId: string, colors: number[]) {
    const __args = { projectId, colors };
    let __writer = new BinaryWriter(1024);
    ReplacePalette.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ReplacePalette", __argsBuffer, this.setCallReducerFlags.replacePaletteFlags);
  }

  onReplacePalette(callback: (ctx: ReducerEventContext, projectId: string, colors: number[]) => void) {
    this.connection.onReducer("ReplacePalette", callback);
  }

  removeOnReplacePalette(callback: (ctx: ReducerEventContext, projectId: string, colors: number[]) => void) {
    this.connection.offReducer("ReplacePalette", callback);
  }

  updateProjectName(projectId: string, name: string) {
    const __args = { projectId, name };
    let __writer = new BinaryWriter(1024);
    UpdateProjectName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("UpdateProjectName", __argsBuffer, this.setCallReducerFlags.updateProjectNameFlags);
  }

  onUpdateProjectName(callback: (ctx: ReducerEventContext, projectId: string, name: string) => void) {
    this.connection.onReducer("UpdateProjectName", callback);
  }

  removeOnUpdateProjectName(callback: (ctx: ReducerEventContext, projectId: string, name: string) => void) {
    this.connection.offReducer("UpdateProjectName", callback);
  }

}

export class SetReducerFlags {
  addColorToPaletteFlags: CallReducerFlags = 'FullUpdate';
  addColorToPalette(flags: CallReducerFlags) {
    this.addColorToPaletteFlags = flags;
  }

  createProjectFlags: CallReducerFlags = 'FullUpdate';
  createProject(flags: CallReducerFlags) {
    this.createProjectFlags = flags;
  }

  initializePaletteFlags: CallReducerFlags = 'FullUpdate';
  initializePalette(flags: CallReducerFlags) {
    this.initializePaletteFlags = flags;
  }

  modifyBlockFlags: CallReducerFlags = 'FullUpdate';
  modifyBlock(flags: CallReducerFlags) {
    this.modifyBlockFlags = flags;
  }

  modifyBlockRectFlags: CallReducerFlags = 'FullUpdate';
  modifyBlockRect(flags: CallReducerFlags) {
    this.modifyBlockRectFlags = flags;
  }

  removeColorFromPaletteFlags: CallReducerFlags = 'FullUpdate';
  removeColorFromPalette(flags: CallReducerFlags) {
    this.removeColorFromPaletteFlags = flags;
  }

  replacePaletteFlags: CallReducerFlags = 'FullUpdate';
  replacePalette(flags: CallReducerFlags) {
    this.replacePaletteFlags = flags;
  }

  updateProjectNameFlags: CallReducerFlags = 'FullUpdate';
  updateProjectName(flags: CallReducerFlags) {
    this.updateProjectNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get chunk(): ChunkTableHandle {
    return new ChunkTableHandle(this.connection.clientCache.getOrCreateTable<Chunk>(REMOTE_MODULE.tables.chunk));
  }

  get colorPalette(): ColorPaletteTableHandle {
    return new ColorPaletteTableHandle(this.connection.clientCache.getOrCreateTable<ColorPalette>(REMOTE_MODULE.tables.color_palette));
  }

  get projects(): ProjectsTableHandle {
    return new ProjectsTableHandle(this.connection.clientCache.getOrCreateTable<Project>(REMOTE_MODULE.tables.projects));
  }

  get userProjects(): UserProjectsTableHandle {
    return new UserProjectsTableHandle(this.connection.clientCache.getOrCreateTable<UserProject>(REMOTE_MODULE.tables.user_projects));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
